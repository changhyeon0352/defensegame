//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""e660cf6b-f9e1-4aa6-91c0-cfbfdd803b35"",
            ""actions"": [
                {
                    ""name"": ""CameraMove"",
                    ""type"": ""Value"",
                    ""id"": ""da7ab17d-8db3-470c-9c49-50fd5e3f1dbb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraRotate"",
                    ""type"": ""Value"",
                    ""id"": ""0cfa0a2e-77a5-49c0-b69e-8f4891880d0c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraRotateOnOff"",
                    ""type"": ""Button"",
                    ""id"": ""e33b86b5-1729-483c-bd1e-e0b0dc8ffa4d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraZoom"",
                    ""type"": ""Value"",
                    ""id"": ""bc9f4279-f0f0-4578-80e0-dbd31defa80c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ee301bdb-7fb8-419d-aac2-0807cdbf7582"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""47bdcfc3-6d0f-47bc-9f73-10b0e501f017"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5f237667-19cf-4631-b5b3-965cb744bd82"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6e890909-2ca1-4f36-86bb-7c17c4d3a44b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""581a4e40-bb56-425b-8e98-99fa8cde1eba"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""07462963-c6f1-4d78-96a7-3fcb102acd1d"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""CameraRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e3c62f4-41df-469e-8a09-12671541834a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRotateOnOff"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""240ba89b-ca37-47be-8efa-11101ef0ed5f"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Setting"",
            ""id"": ""c7aadc0e-47e6-4d72-a8a8-2c4f8cd1e8fe"",
            ""actions"": [
                {
                    ""name"": ""NewUnitGroup"",
                    ""type"": ""Button"",
                    ""id"": ""63b8ae0b-47bc-407f-9863-76442e02da37"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""scrollUpDown"",
                    ""type"": ""Value"",
                    ""id"": ""a2f8055c-c67f-4018-929f-fdc29243625d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateUnitGroup"",
                    ""type"": ""Value"",
                    ""id"": ""4b9cba86-49eb-48b1-8178-1af57f6b2f24"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""41b3e08d-2428-403d-80ce-eeb847003fc8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReSetting"",
                    ""type"": ""Button"",
                    ""id"": ""4593cc3c-cd7e-4737-bc6d-bd7a4c2dcd91"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchRow"",
                    ""type"": ""Button"",
                    ""id"": ""053bf4f0-d9c6-4fbc-8b7d-8b9b09a233df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cd037e39-09e1-488e-aa8e-703615c3725e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NewUnitGroup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23c3e38a-b9de-4ad4-a15d-bc77ae49cae4"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""scrollUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""dab6e51b-82a5-4825-8040-a35794070379"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateUnitGroup"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""f8ac8ea2-6f8b-4961-9d4c-0c0231bd5496"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateUnitGroup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""8f6c317f-8f10-41a9-b5c7-e1a98bc544d7"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateUnitGroup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7f9e05e2-9ebd-4da6-8c5b-a387c091a19c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5be3a913-d85d-4002-86df-6465d463fcca"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReSetting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be2fc703-1f7a-43cc-8f63-6f15c8a48a0c"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchRow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63ca5f40-7439-4ebf-9b07-3add6bead423"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchRow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""304f0050-d6b7-4650-bc54-881212c589f6"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchRow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d9f60cf-11be-4533-8b7b-20b0f3c36daf"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchRow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Test"",
            ""id"": ""6f988005-0680-4377-a4b3-50e406b2fdb5"",
            ""actions"": [
                {
                    ""name"": ""CameraStop"",
                    ""type"": ""Button"",
                    ""id"": ""178f1cea-74ac-489d-b217-1ad6b9ae66cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ecda2b5c-6a02-467d-bc5a-598e505c1de7"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraStop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Command"",
            ""id"": ""ec32dbf4-cfac-47a6-9848-f75a2959fcbe"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""b4285c70-e16b-4eb7-a9b7-ab235d118973"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""28f94a1c-bc30-4ee4-ae40-eb59df0d4500"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""pc"",
            ""bindingGroup"": ""pc"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_CameraMove = m_Camera.FindAction("CameraMove", throwIfNotFound: true);
        m_Camera_CameraRotate = m_Camera.FindAction("CameraRotate", throwIfNotFound: true);
        m_Camera_CameraRotateOnOff = m_Camera.FindAction("CameraRotateOnOff", throwIfNotFound: true);
        m_Camera_CameraZoom = m_Camera.FindAction("CameraZoom", throwIfNotFound: true);
        // Setting
        m_Setting = asset.FindActionMap("Setting", throwIfNotFound: true);
        m_Setting_NewUnitGroup = m_Setting.FindAction("NewUnitGroup", throwIfNotFound: true);
        m_Setting_scrollUpDown = m_Setting.FindAction("scrollUpDown", throwIfNotFound: true);
        m_Setting_RotateUnitGroup = m_Setting.FindAction("RotateUnitGroup", throwIfNotFound: true);
        m_Setting_Click = m_Setting.FindAction("Click", throwIfNotFound: true);
        m_Setting_ReSetting = m_Setting.FindAction("ReSetting", throwIfNotFound: true);
        m_Setting_SwitchRow = m_Setting.FindAction("SwitchRow", throwIfNotFound: true);
        // Test
        m_Test = asset.FindActionMap("Test", throwIfNotFound: true);
        m_Test_CameraStop = m_Test.FindAction("CameraStop", throwIfNotFound: true);
        // Command
        m_Command = asset.FindActionMap("Command", throwIfNotFound: true);
        m_Command_Click = m_Command.FindAction("Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera
    private readonly InputActionMap m_Camera;
    private ICameraActions m_CameraActionsCallbackInterface;
    private readonly InputAction m_Camera_CameraMove;
    private readonly InputAction m_Camera_CameraRotate;
    private readonly InputAction m_Camera_CameraRotateOnOff;
    private readonly InputAction m_Camera_CameraZoom;
    public struct CameraActions
    {
        private @PlayerInput m_Wrapper;
        public CameraActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraMove => m_Wrapper.m_Camera_CameraMove;
        public InputAction @CameraRotate => m_Wrapper.m_Camera_CameraRotate;
        public InputAction @CameraRotateOnOff => m_Wrapper.m_Camera_CameraRotateOnOff;
        public InputAction @CameraZoom => m_Wrapper.m_Camera_CameraZoom;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterface != null)
            {
                @CameraMove.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnCameraMove;
                @CameraMove.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnCameraMove;
                @CameraMove.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnCameraMove;
                @CameraRotate.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnCameraRotate;
                @CameraRotate.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnCameraRotate;
                @CameraRotate.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnCameraRotate;
                @CameraRotateOnOff.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnCameraRotateOnOff;
                @CameraRotateOnOff.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnCameraRotateOnOff;
                @CameraRotateOnOff.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnCameraRotateOnOff;
                @CameraZoom.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnCameraZoom;
                @CameraZoom.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnCameraZoom;
                @CameraZoom.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnCameraZoom;
            }
            m_Wrapper.m_CameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CameraMove.started += instance.OnCameraMove;
                @CameraMove.performed += instance.OnCameraMove;
                @CameraMove.canceled += instance.OnCameraMove;
                @CameraRotate.started += instance.OnCameraRotate;
                @CameraRotate.performed += instance.OnCameraRotate;
                @CameraRotate.canceled += instance.OnCameraRotate;
                @CameraRotateOnOff.started += instance.OnCameraRotateOnOff;
                @CameraRotateOnOff.performed += instance.OnCameraRotateOnOff;
                @CameraRotateOnOff.canceled += instance.OnCameraRotateOnOff;
                @CameraZoom.started += instance.OnCameraZoom;
                @CameraZoom.performed += instance.OnCameraZoom;
                @CameraZoom.canceled += instance.OnCameraZoom;
            }
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // Setting
    private readonly InputActionMap m_Setting;
    private ISettingActions m_SettingActionsCallbackInterface;
    private readonly InputAction m_Setting_NewUnitGroup;
    private readonly InputAction m_Setting_scrollUpDown;
    private readonly InputAction m_Setting_RotateUnitGroup;
    private readonly InputAction m_Setting_Click;
    private readonly InputAction m_Setting_ReSetting;
    private readonly InputAction m_Setting_SwitchRow;
    public struct SettingActions
    {
        private @PlayerInput m_Wrapper;
        public SettingActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @NewUnitGroup => m_Wrapper.m_Setting_NewUnitGroup;
        public InputAction @scrollUpDown => m_Wrapper.m_Setting_scrollUpDown;
        public InputAction @RotateUnitGroup => m_Wrapper.m_Setting_RotateUnitGroup;
        public InputAction @Click => m_Wrapper.m_Setting_Click;
        public InputAction @ReSetting => m_Wrapper.m_Setting_ReSetting;
        public InputAction @SwitchRow => m_Wrapper.m_Setting_SwitchRow;
        public InputActionMap Get() { return m_Wrapper.m_Setting; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SettingActions set) { return set.Get(); }
        public void SetCallbacks(ISettingActions instance)
        {
            if (m_Wrapper.m_SettingActionsCallbackInterface != null)
            {
                @NewUnitGroup.started -= m_Wrapper.m_SettingActionsCallbackInterface.OnNewUnitGroup;
                @NewUnitGroup.performed -= m_Wrapper.m_SettingActionsCallbackInterface.OnNewUnitGroup;
                @NewUnitGroup.canceled -= m_Wrapper.m_SettingActionsCallbackInterface.OnNewUnitGroup;
                @scrollUpDown.started -= m_Wrapper.m_SettingActionsCallbackInterface.OnScrollUpDown;
                @scrollUpDown.performed -= m_Wrapper.m_SettingActionsCallbackInterface.OnScrollUpDown;
                @scrollUpDown.canceled -= m_Wrapper.m_SettingActionsCallbackInterface.OnScrollUpDown;
                @RotateUnitGroup.started -= m_Wrapper.m_SettingActionsCallbackInterface.OnRotateUnitGroup;
                @RotateUnitGroup.performed -= m_Wrapper.m_SettingActionsCallbackInterface.OnRotateUnitGroup;
                @RotateUnitGroup.canceled -= m_Wrapper.m_SettingActionsCallbackInterface.OnRotateUnitGroup;
                @Click.started -= m_Wrapper.m_SettingActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_SettingActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_SettingActionsCallbackInterface.OnClick;
                @ReSetting.started -= m_Wrapper.m_SettingActionsCallbackInterface.OnReSetting;
                @ReSetting.performed -= m_Wrapper.m_SettingActionsCallbackInterface.OnReSetting;
                @ReSetting.canceled -= m_Wrapper.m_SettingActionsCallbackInterface.OnReSetting;
                @SwitchRow.started -= m_Wrapper.m_SettingActionsCallbackInterface.OnSwitchRow;
                @SwitchRow.performed -= m_Wrapper.m_SettingActionsCallbackInterface.OnSwitchRow;
                @SwitchRow.canceled -= m_Wrapper.m_SettingActionsCallbackInterface.OnSwitchRow;
            }
            m_Wrapper.m_SettingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @NewUnitGroup.started += instance.OnNewUnitGroup;
                @NewUnitGroup.performed += instance.OnNewUnitGroup;
                @NewUnitGroup.canceled += instance.OnNewUnitGroup;
                @scrollUpDown.started += instance.OnScrollUpDown;
                @scrollUpDown.performed += instance.OnScrollUpDown;
                @scrollUpDown.canceled += instance.OnScrollUpDown;
                @RotateUnitGroup.started += instance.OnRotateUnitGroup;
                @RotateUnitGroup.performed += instance.OnRotateUnitGroup;
                @RotateUnitGroup.canceled += instance.OnRotateUnitGroup;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @ReSetting.started += instance.OnReSetting;
                @ReSetting.performed += instance.OnReSetting;
                @ReSetting.canceled += instance.OnReSetting;
                @SwitchRow.started += instance.OnSwitchRow;
                @SwitchRow.performed += instance.OnSwitchRow;
                @SwitchRow.canceled += instance.OnSwitchRow;
            }
        }
    }
    public SettingActions @Setting => new SettingActions(this);

    // Test
    private readonly InputActionMap m_Test;
    private ITestActions m_TestActionsCallbackInterface;
    private readonly InputAction m_Test_CameraStop;
    public struct TestActions
    {
        private @PlayerInput m_Wrapper;
        public TestActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraStop => m_Wrapper.m_Test_CameraStop;
        public InputActionMap Get() { return m_Wrapper.m_Test; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestActions set) { return set.Get(); }
        public void SetCallbacks(ITestActions instance)
        {
            if (m_Wrapper.m_TestActionsCallbackInterface != null)
            {
                @CameraStop.started -= m_Wrapper.m_TestActionsCallbackInterface.OnCameraStop;
                @CameraStop.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnCameraStop;
                @CameraStop.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnCameraStop;
            }
            m_Wrapper.m_TestActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CameraStop.started += instance.OnCameraStop;
                @CameraStop.performed += instance.OnCameraStop;
                @CameraStop.canceled += instance.OnCameraStop;
            }
        }
    }
    public TestActions @Test => new TestActions(this);

    // Command
    private readonly InputActionMap m_Command;
    private ICommandActions m_CommandActionsCallbackInterface;
    private readonly InputAction m_Command_Click;
    public struct CommandActions
    {
        private @PlayerInput m_Wrapper;
        public CommandActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_Command_Click;
        public InputActionMap Get() { return m_Wrapper.m_Command; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CommandActions set) { return set.Get(); }
        public void SetCallbacks(ICommandActions instance)
        {
            if (m_Wrapper.m_CommandActionsCallbackInterface != null)
            {
                @Click.started -= m_Wrapper.m_CommandActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_CommandActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_CommandActionsCallbackInterface.OnClick;
            }
            m_Wrapper.m_CommandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
            }
        }
    }
    public CommandActions @Command => new CommandActions(this);
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    private int m_pcSchemeIndex = -1;
    public InputControlScheme pcScheme
    {
        get
        {
            if (m_pcSchemeIndex == -1) m_pcSchemeIndex = asset.FindControlSchemeIndex("pc");
            return asset.controlSchemes[m_pcSchemeIndex];
        }
    }
    public interface ICameraActions
    {
        void OnCameraMove(InputAction.CallbackContext context);
        void OnCameraRotate(InputAction.CallbackContext context);
        void OnCameraRotateOnOff(InputAction.CallbackContext context);
        void OnCameraZoom(InputAction.CallbackContext context);
    }
    public interface ISettingActions
    {
        void OnNewUnitGroup(InputAction.CallbackContext context);
        void OnScrollUpDown(InputAction.CallbackContext context);
        void OnRotateUnitGroup(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
        void OnReSetting(InputAction.CallbackContext context);
        void OnSwitchRow(InputAction.CallbackContext context);
    }
    public interface ITestActions
    {
        void OnCameraStop(InputAction.CallbackContext context);
    }
    public interface ICommandActions
    {
        void OnClick(InputAction.CallbackContext context);
    }
}
